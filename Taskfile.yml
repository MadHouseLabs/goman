version: '3'

vars:
  BINARY_NAME: goman
  BUILD_DIR: build
  INSTALL_PATH: /usr/local/bin
  AWS_REGION: ap-south-1

tasks:
  # Default task
  default:
    desc: Show available tasks
    cmds:
      - task --list

  # Main build tasks
  build:
    desc: Build all binaries
    deps: [build:ui, build:lambda]
    cmds:
      - echo "‚úÖ All binaries built successfully"

  build:ui:
    desc: Build the UI binary
    cmds:
      - echo "üî® Building UI..."
      - go build -v -o {{.BINARY_NAME}} ./cmd/goman
    sources:
      - cmd/goman/**/*.go
      - pkg/**/*.go
    generates:
      - "{{.BINARY_NAME}}"

  build:lambda:
    desc: Build Lambda controller
    cmds:
      - echo "üî® Building Lambda controller..."
      - mkdir -p {{.BUILD_DIR}}
      - GOOS=linux GOARCH=amd64 CGO_ENABLED=0 go build -tags aws -o {{.BUILD_DIR}}/bootstrap ./lambda/controller
      - cd {{.BUILD_DIR}} && zip -q lambda-aws-controller.zip bootstrap
      - echo "‚úÖ Lambda package created at {{.BUILD_DIR}}/lambda-aws-controller.zip"
    sources:
      - lambda/controller/**/*.go
      - pkg/**/*.go
    generates:
      - "{{.BUILD_DIR}}/lambda-aws-controller.zip"

  # Run tasks
  run:
    desc: Run the UI
    deps: [build:ui]
    cmds:
      - ./{{.BINARY_NAME}}

  dev:
    desc: Run in development mode with auto-reload
    cmds:
      - |
        if command -v air &> /dev/null; then
          air
        else
          echo "‚ùå Air not installed. Install with:"
          echo "  go install github.com/cosmtrek/air@latest"
          exit 1
        fi

  # Installation tasks
  install:
    desc: Install goman to system path
    deps: [build:ui]
    cmds:
      - echo "üì¶ Installing {{.BINARY_NAME}} to {{.INSTALL_PATH}}..."
      - sudo cp {{.BINARY_NAME}} {{.INSTALL_PATH}}/
      - sudo chmod +x {{.INSTALL_PATH}}/{{.BINARY_NAME}}
      - echo "‚úÖ Installation complete"

  uninstall:
    desc: Remove goman from system path
    cmds:
      - echo "üóëÔ∏è  Removing {{.BINARY_NAME}} from {{.INSTALL_PATH}}..."
      - sudo rm -f {{.INSTALL_PATH}}/{{.BINARY_NAME}}
      - echo "‚úÖ Uninstallation complete"

  # Lambda deployment
  deploy:lambda:
    desc: Deploy Lambda function to AWS
    deps: [build:lambda]
    cmds:
      - echo "üöÄ Deploying Lambda function..."
      - |
        # Get AWS account ID
        ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
        FUNCTION_NAME="goman-controller-${ACCOUNT_ID}"
        
        # Check if function exists
        if aws lambda get-function --function-name ${FUNCTION_NAME} --region {{.AWS_REGION}} > /dev/null 2>&1; then
          echo "üì¶ Updating Lambda function ${FUNCTION_NAME}..."
          aws lambda update-function-code \
            --function-name ${FUNCTION_NAME} \
            --zip-file fileb://{{.BUILD_DIR}}/lambda-aws-controller.zip \
            --region {{.AWS_REGION}} > /dev/null
          echo "‚úÖ Lambda deployment complete"
        else
          echo "‚ùå Lambda function '${FUNCTION_NAME}' does not exist."
          echo "üí° Run 'goman init' first to initialize infrastructure."
          exit 1
        fi

  logs:lambda:
    desc: View Lambda function logs
    cmds:
      - echo "üìã Viewing Lambda logs..."
      - |
        ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
        FUNCTION_NAME="goman-controller-${ACCOUNT_ID}"
        aws logs tail /aws/lambda/${FUNCTION_NAME} --follow --region {{.AWS_REGION}}

  # Code quality tasks
  test:
    desc: Run tests
    cmds:
      - echo "üß™ Running tests..."
      - go test -v ./...

  test:coverage:
    desc: Run tests with coverage
    cmds:
      - echo "üß™ Running tests with coverage..."
      - go test -v -cover ./...

  fmt:
    desc: Format code
    cmds:
      - echo "üé® Formatting code..."
      - go fmt ./...
      - echo "‚úÖ Code formatted"

  lint:
    desc: Run linter
    cmds:
      - echo "üîç Running linter..."
      - |
        if command -v golangci-lint &> /dev/null; then
          golangci-lint run
        else
          echo "‚ùå golangci-lint not installed. Install with:"
          echo "  brew install golangci-lint"
          exit 1
        fi

  check:
    desc: Run all checks (fmt, lint, test)
    cmds:
      - task: fmt
      - task: lint
      - task: test

  # Dependency management
  deps:
    desc: Download and tidy dependencies
    cmds:
      - echo "üì¶ Managing dependencies..."
      - go mod download
      - go mod tidy
      - echo "‚úÖ Dependencies updated"

  deps:update:
    desc: Update all dependencies
    cmds:
      - echo "‚¨ÜÔ∏è  Updating dependencies..."
      - go get -u ./...
      - go mod tidy
      - echo "‚úÖ Dependencies updated"

  # Clean tasks
  clean:
    desc: Clean build artifacts
    cmds:
      - echo "üßπ Cleaning build artifacts..."
      - rm -f {{.BINARY_NAME}}
      - rm -rf {{.BUILD_DIR}}
      - rm -f lambda/controller/bootstrap
      - echo "‚úÖ Clean complete"

  # Development setup
  setup:dev:
    desc: Setup development environment
    cmds:
      - echo "üõ†Ô∏è  Setting up development environment..."
      - go install github.com/cosmtrek/air@latest
      - go install github.com/golangci/golangci-lint/cmd/golangci-lint@latest
      - task: deps
      - echo "‚úÖ Development environment ready"

  # Docker tasks
  docker:build:
    desc: Build Docker image
    cmds:
      - echo "üê≥ Building Docker image..."
      - docker build -t goman:latest .

  docker:run:
    desc: Run in Docker
    deps: [docker:build]
    cmds:
      - docker run -it --rm -e AWS_PROFILE -e AWS_REGION -v ~/.aws:/root/.aws:ro goman:latest

  # Release tasks
  release:
    desc: Build release binaries for all platforms
    cmds:
      - echo "üì¶ Building release binaries..."
      - mkdir -p dist
      # macOS
      - GOOS=darwin GOARCH=amd64 go build -o dist/{{.BINARY_NAME}}-darwin-amd64 ./cmd/goman
      - GOOS=darwin GOARCH=arm64 go build -o dist/{{.BINARY_NAME}}-darwin-arm64 ./cmd/goman
      # Linux
      - GOOS=linux GOARCH=amd64 go build -o dist/{{.BINARY_NAME}}-linux-amd64 ./cmd/goman
      - GOOS=linux GOARCH=arm64 go build -o dist/{{.BINARY_NAME}}-linux-arm64 ./cmd/goman
      # Windows
      - GOOS=windows GOARCH=amd64 go build -o dist/{{.BINARY_NAME}}-windows-amd64.exe ./cmd/goman
      - echo "‚úÖ Release binaries built in dist/"

  # Testing tasks
  test:e2e:
    desc: Run end-to-end tests
    cmds:
      - echo "üß™ Running end-to-end tests..."
      - ./scripts/e2e_test.sh

  test:quick:
    desc: Run quick tests
    cmds:
      - echo "üß™ Running quick tests..."
      - ./scripts/quick_test.sh

  check:resources:
    desc: Check AWS resources across regions
    cmds:
      - echo "üîç Checking AWS resources..."
      - ./scripts/check_resources.sh

  # Watch for changes (requires fswatch)
  watch:
    desc: Watch for changes and rebuild
    cmds:
      - |
        echo "üëÄ Watching for changes..."
        if command -v fswatch &> /dev/null; then
          fswatch -o pkg cmd | xargs -n1 -I{} task build:ui
        else
          echo "‚ùå fswatch not installed. Install with:"
          echo "  brew install fswatch"
          exit 1
        fi